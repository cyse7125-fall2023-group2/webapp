pipeline {
    agent any
    stages {
        stage('Fetch GitHub Credentials') {
            steps {
                script {
                    // Define credentials for GitHub
                    withCredentials([usernamePassword(credentialsId: 'GITHUB_CREDENTIALS_ID', usernameVariable: 'githubUsername', passwordVariable: 'githubToken')]) {
                        git branch: 'main', credentialsId: 'GITHUB_CREDENTIALS_ID', url: 'https://github.com/cyse7125-fall2023-group2/webapp-helm-chart'        
                    }
                }
            }
        }

        stage('Helm vesion'){
            steps{
                sh """
                helm version
                """
            }
        }
        stage('Helm Lint') {
            steps {
                sh 'helm lint .'
            }
        }

        stage('Helm Template') {
            steps {
                sh 'helm template .'
            }
        }

        stage('release') {
            steps {
                script {
                    // Define credentials for GitHub
                    withCredentials([usernamePassword(credentialsId: 'GITHUB_CREDENTIALS_ID', usernameVariable: 'githubUsername', passwordVariable: 'githubToken')]) {
                      withEnv(["GH_TOKEN=${githubToken}"]){
                       sh """
                            npx semantic-release
                       """
                      }     
                    }
                }
            }
        }
        stage('post-release') {
            steps {
                script {
                    // Define credentials for GitHub
                    withCredentials([usernamePassword(credentialsId: 'GITHUB_CREDENTIALS_ID', usernameVariable: 'githubUsername', passwordVariable: 'githubToken')]) {
                    version_id= sh(returnStdout: true, script: "git describe --abbrev=0 --tags | tr -d 'v' ").trim()
                    // Update Chart.yaml with the new version
                    sh "sed -i 's/^version: .*/version: ${version_id}/' ."

                    // Package Helm chart
                    sh "helm package . -d ."

                }
            }
        }
        }


        // stage('Create GitHub Release') {
        //     steps {
        //         script {
        //             def chartName = sh(script: 'basename path/to/your/chart', returnStatus: true).trim()
        //             def zipFileName = "${chartName}-${newVersion}.tgz"

        //             // Create GitHub release using GitHub API
        //             sh "github-release create myorg/myrepo ${newVersion} -t ${zipFileName}"
        //         }
        //     }
        // }
    }

    // post {
    //     always {
    //         // Clean up or post-processing steps
    //     }
    // }


}