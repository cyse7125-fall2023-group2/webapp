---
# Source: csye7125-chart/templates/networkPolicy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: webapp-database-network-policy
  namespace: webapp
spec:
  podSelector:
    matchLabels:
      instance: package
  policyTypes:
    - Ingress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app : package-webapp
      ports:
        - protocol: TCP
          port: 5432
---
# Source: csye7125-chart/templates/limitRange.yaml
apiVersion: v1
kind: LimitRange
metadata:
  name: default-limits
  namespace: webapp
spec:
  limits:
  - type: Container
    default:
      memory: 512Mi
      cpu: 500m
    defaultRequest:
      memory: 256Mi
      cpu: 50m
    max:
      memory: 1Gi
      cpu: 500m
    min:
      memory: 64Mi
      cpu: 10m
    maxLimitRequestRatio:
      memory: 4
      cpu: 10
---
# Source: csye7125-chart/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: webapp-service-account
  namespace: webapp
---
# Source: csye7125-chart/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: package-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: package
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.0.0
    helm.sh/chart: postgresql-13.1.5
type: Opaque
data:
  postgres-password: "cG9zdGdyZXM="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: csye7125-chart/templates/docker-secrets.yaml
apiVersion: v1
data:
  .dockerconfigjson: eyJhdXRocyI6eyJodHRwczovL2luZGV4LmRvY2tlci5pby92MS8iOnsidXNlcm5hbWUiOiJzdW1hbnRoa3NhaSIsInBhc3N3b3JkIjoiQXNkcXdlQDU2NDAiLCJlbWFpbCI6InN1bWFudGhrc2FpMDVAZ21haWwuY29tIiwiYXV0aCI6ImMzVnRZVzUwYUd0ellXazZRWE5rY1hkbFFEVTJOREE9In19fQ==
kind: Secret
metadata:
  creationTimestamp: null
  name: package-docker-regcred
  namespace: webapp
type: kubernetes.io/dockerconfigjson
---
# Source: csye7125-chart/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: package-secrets
  namespace: webapp
data:
  DB_PASSWORD: cG9zdGdyZXM=
---
# Source: csye7125-chart/templates/config-map.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: package-configs
  namespace: webapp
data:
  flyway.conf: |
    flyway.url=jdbc:postgresql://package-postgresql-0.package-postgresql-hl.default.svc.cluster.local/app

    
    flyway.user=postgres
    flyway.password=postgres
    flyway.baselineOnMigrate=false
---
# Source: csye7125-chart/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: webapp
  name: webapp-role
rules:
 - apiGroups: [""]
   resources: ["configmaps", "secrets"]
   verbs: ["get", "list", "watch"]
 - apiGroups: ["crwebapp.my.domain"]
   resources: ["webappcrs"]
   verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
# Source: csye7125-chart/templates/role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  namespace: webapp
  name: webapp-role-binding
subjects:
- kind: ServiceAccount
  name: webapp-service-account
roleRef:
  kind: Role
  name: webapp-role
  apiGroup: rbac.authorization.k8s.io
# subjects:
# - kind: ServiceAccount
#   name: webappcr-controller-manager
#   namespace: webappcr-system
---
# Source: csye7125-chart/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: package-postgresql-hl
  namespace: "default"
  labels:
    app.kubernetes.io/instance: package
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.0.0
    helm.sh/chart: postgresql-13.1.5
    app.kubernetes.io/component: primary
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: package
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: csye7125-chart/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: package-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: package
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.0.0
    helm.sh/chart: postgresql-13.1.5
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: package
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: csye7125-chart/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: package-webapp-service
  name: package-webapp-service
  namespace: webapp
spec:
  selector:
    app: package-webapp
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 4000
  type: LoadBalancer
---
# Source: csye7125-chart/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
   name: package-csye7125
   labels:
     app : package-webapp
   namespace: webapp
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  minReadySeconds: 30
  progressDeadlineSeconds: 120
  selector:
    matchLabels:
      app: package-webapp
  template:
      metadata:
       labels:
        app: package-webapp
      spec:
        affinity:
          podAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - package-webapp
              topologyKey: topology.kubernetes.io/zone
        serviceAccountName: webapp-service-account
        imagePullSecrets:
          - name: package-docker-regcred
        containers:
        - name: csye7125-webapp
          image: sumanthksai/webapp:1.10.0
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              memory: 256Mi
              cpu: 500m
            limits:
              memory: 512Mi
              cpu: 500m
          env:
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: package-secrets
                  key: DB_PASSWORD
            - name: DB_USERNAME
              value: postgres
            - name: DB_HOST
              value: package-postgresql-0.package-postgresql-hl.default.svc.cluster.local
            - name: "DB_NAME"
              value: "app"
            - name: "DB_PORT"
              value: "5432"
            - name: "APP_PORT"
              value: "4000"
          ports:
            - containerPort: 4000
          volumeMounts:
            - name: flyway-config-volume
              mountPath: /flyway/conf
            - name: secret-volume
              mountPath: /flyway/db_password.txt
              subPath: db_password.txt
          readinessProbe:
            httpGet:
              path: /healthz
              port: 4000
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /healthz
              port: 4000
            initialDelaySeconds: 10
            periodSeconds: 20
        initContainers:
          - name: flyway-migrate
            image: sumanthksai/csye7125-flyway:latest
            resources:
              requests:
                memory: 256Mi
                cpu: 500m
              limits:
                memory: 512Mi
                cpu: 500m
            volumeMounts:
              - name: flyway-config-volume
                mountPath: /flyway/conf
              - name: secret-volume
                mountPath: /flyway/db_password.txt
                subPath: db_password.txt
            command: ["flyway","migrate", "-configFiles=/flyway/conf/flyway.conf" ,"-locations=filesystem:/flyway/sql" , "-connectRetries=60"]
        volumes:
        - name: flyway-config-volume
          configMap:
            name: package-configs
        - name: secret-volume
          secret:
            secretName: package-secrets
---
# Source: csye7125-chart/templates/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
   name: package-autoscaler
   namespace: webapp
spec:
  scaleTargetRef:
   apiVersion: apps/v1
   kind: Deployment
   name: package-csye7125
  minReplicas: 1
  maxReplicas: 5
  metrics:
   - type: Resource
     resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 5
---
# Source: csye7125-chart/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: package-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: package
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.0.0
    helm.sh/chart: postgresql-13.1.5
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: package-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: package
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: package-postgresql
      labels:
        app.kubernetes.io/instance: package
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 16.0.0
        helm.sh/chart: postgresql-13.1.5
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: package
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:16.0.0-debian-11-r13
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: package-postgresql
                  key: postgres-password
            - name: POSTGRES_DATABASE
              value: "app"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -d "dbname=app" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -d "dbname=app" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
